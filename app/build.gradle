plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id("org.barfuin.gradle.jacocolog") version "3.1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'com.sparkjava:spark-core:2.9.3'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation group: 'org.json', name: 'json', version: '20230618'
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.+'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
           srcDir 'src/main/resources'
        }
    }
   test {
        java {
           srcDir 'src/test'
        }
    }
}

processResources {
    duplicatesStrategy = 'include'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle.xml")
    toolVersion = '10.21.4'
}

task lint {
    description("Lints the entire codebase, runs both checkstyleMain and checkstyleTest")
    group("verification")
    dependsOn('checkstyleMain', 'checkstyleTest')
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**App**',
                'scintilla/**'
            ])
        })
    }

    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    // violationRules {
    //     rule {
    //         limit {
    //             counter = "BRANCH"
    //             minimum = 0.80
    //         }
    //     }
    // }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/App**',
                'scintilla/**'
            ])
        })
    }

    dependsOn jacocoTestReport
}

task coverage {
    description("Generate coverage report and check if above threshold if it exists")
    group("verification")
    dependsOn('jacocoTestCoverageVerification')
}

task compile {
    description("Checks if main code can compile with test code")
    group = 'verification'
    dependsOn 'testClasses'
}

task compileOffline {
    description = 'Compiles the project offline'
    group = 'verification'
    doLast {
        exec {
            commandLine 'gradle', 'compile', '--offline'
        }
    }
}

task compileWithFallback {
    description = 'Attempts to compile offline, then online if offline fails'
    group("verification")
    doLast {
        def offlineCompileSuccessful = false
        try {
            println "Trying to compile offline..."
            exec {
                commandLine 'gradle', 'compileOffline'
            }
            offlineCompileSuccessful = true
            println 'Offline build successful.'
        } catch (Exception e) {
            println 'Offline build failed: ' + e.message
        }
        if (!offlineCompileSuccessful) {
            println 'Trying to build online...'
            exec {
                commandLine 'gradle', 'compile'
            }
        }
    }
}

task lintWithFallback {
    description = 'Attempts to lint offline, then online if offline fails'
    group("verification")
    doLast {
        def offlineLintSuccessful = false
        try {
            println "Trying to lint offline..."
            exec {
                commandLine 'gradle', 'lint', '--offline'
            }
            offlineLintSuccessful = true
        } catch (Exception e) {
            println 'Offline lint failed: ' + e.message
        }
        if (!offlineLintSuccessful) {
            println 'Trying to lint online...'
            exec {
                commandLine 'gradle', 'lint'
            }
        }
    }
}

jacocoLogTestCoverage {
    logAlways = true
    counters {
        showClassCoverage = false
        showMethodCoverage = false
        showInstructionCoverage = false
        showComplexityCoverage = false
    }
}

application {
    mainClass = 'unsw.App'
}
